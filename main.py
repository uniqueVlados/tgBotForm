from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton


TOKEN = "YOUR_TOKEN"

STATES = {"start": False, "ans": 1}

# MSG
HELP_INFO = "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å*, –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –≥—É–≥–ª —Ñ–æ—Ä–º—É, –≥–¥–µ –≤—ã –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏," \
            " –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ —Ç–¥.,–ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–ø—Ä–æ—Å –±–µ—Ä–µ—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É " \
            "–Ω–∞—à–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.\n–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É *–£—á–∞—Å—Ç–∏–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º*, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—é –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ " \
            "–∂–µ–ª–∞–Ω–∏–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Å—ã–ª–∫—É –≥—É–≥–ª-—Ñ–æ—Ä–º—ã, –≥–¥–µ " \
            "—Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç, –ø–æ—Å–ª–µ" \
            " —á–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—É"

PARD_TEXT = "–ü—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à—É –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º —Å–∞–º—É—é –ø–æ–ª–Ω—É—é –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é" \
            " –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."

PARD_PROJECT_TEXT = "üíº–ö–Ω–æ–ø–∫–∞ *–ü–∞—Ä—Ç–Ω–µ—Ä* - –∑–∞–ø—Ä–æ—Å –æ—Ç  –∫–æ–º–ø–∞–Ω–∏–π, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ –≤–Ω–µ–¥—Ä–µ–Ω–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π " \
                    "–ø–æ–¥ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã\nüöÄ–ö–Ω–æ–ø–∫–∞ *–ü—Ä–æ–µ–∫—Ç* - –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ" \
                    " —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π."

# BUTTONS
BUTTON_PARD = KeyboardButton('–ü–∞—Ä—Ç–Ω—ë—Äü§ù')
BUTTON_PROJECT = KeyboardButton('–ü—Ä–æ–µ–∫—Çüìü')
BUTTON_PARD_LINK = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url="https://docs.google.com/forms/d/e/1FAIpQLSeS"
                                                       "2PtNZzTTZxurwyZhW-8a8s-frw5WcL7ppFSZNOsPxcj0rw/viewform")
BUTTON_NEED = KeyboardButton('–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—åüëã')
BUTTON_INFO = KeyboardButton(' ‚ùì ')
BUTTON_ANS = KeyboardButton('‚ùì')
BUTTON_FRIEND = KeyboardButton('–£—á–∞—Å—Ç–∏–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–ºüë•')
BUTTON_BACK = KeyboardButton('–ù–∞–∑–∞–¥‚§¥Ô∏è')

BUTTON_NEED_LINK = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url="https://docs.google.com/forms/d/e/1FAIpQLSeW7bDgdYa"
                                                            "tnQxgEwD1BRYi3DMsYAE4QJsrr0WKX2aCGXeDqg/viewform ")

BUTTON_ACTION_PARD_LINK = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url="https://docs.google.com/forms/d/e/1FAIpQLSfxUNfl"
                                                                   "7pxOsvpwnrEYIqonK5cg2A8vUECtWl3um5wfwZXDUw/viewform ")

# KEYBOARDS
KB_START = ReplyKeyboardMarkup(resize_keyboard=True)
KB_START.add(BUTTON_PARD, BUTTON_PROJECT, BUTTON_INFO)

KB_LINK_PARD = InlineKeyboardMarkup(resize_keyboard=True)
KB_LINK_PARD.add(BUTTON_PARD_LINK)

KB_PARD = ReplyKeyboardMarkup(resize_keyboard=True)
KB_PARD.add(BUTTON_PARD, BUTTON_BACK)

KB_PROJECT = ReplyKeyboardMarkup(resize_keyboard=True)
KB_PROJECT.add(BUTTON_NEED, BUTTON_ANS, BUTTON_FRIEND, BUTTON_BACK)

KB_LINK_NEED = InlineKeyboardMarkup(resize_keyboard=True)
KB_LINK_NEED.add(BUTTON_NEED_LINK)

KB_LINK_ACTION_PARD = InlineKeyboardMarkup(resize_keyboard=True)
KB_LINK_ACTION_PARD.add(BUTTON_ACTION_PARD_LINK)


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_(message: types.Message):
    STATES["start"] = True
    await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}", reply_markup=KB_START)


@dp.message_handler(commands=['help'])
async def start_(message: types.Message):
    await message.reply(HELP_INFO, reply_markup=KB_PROJECT, parse_mode="Markdown")


@dp.message_handler()
async def info(message: types.Message):
    if message.text == "–ü–∞—Ä—Ç–Ω—ë—Äü§ù":
        STATES["btn_back"] = "PARD"
        await message.reply(PARD_TEXT, reply_markup=KB_PARD)
        await message.reply("‚¨áÔ∏è–§–û–†–ú–ê –î–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø‚¨áÔ∏è", reply_markup=KB_LINK_PARD)
    elif message.text == "–ü—Ä–æ–µ–∫—Çüìü":
        STATES["btn_back"] = "PROJECT"
        await message.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ñ–∏—á—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ ‚Äú?‚Äù',
                            reply_markup=KB_PROJECT)
    elif message.text == "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—åüëã":
        await message.reply('‚¨áÔ∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—ÉÔ∏è‚¨áÔ∏è',
                            reply_markup=KB_LINK_NEED)
    elif message.text == "–£—á–∞—Å—Ç–∏–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–ºüë•":
        await message.reply('‚¨áÔ∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—ÉÔ∏è‚¨áÔ∏è',
                            reply_markup=KB_LINK_ACTION_PARD)
    elif message.text == "–ù–∞–∑–∞–¥‚§¥Ô∏è":
        STATES["ans"] = 1
        await message.reply(f"{message.from_user.first_name}, –í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=KB_START)
    elif message.text == "‚ùì" and STATES["ans"] == 1:
        STATES["ans"] = 2
        await message.reply(PARD_PROJECT_TEXT, reply_markup=KB_START, parse_mode="Markdown")
    elif message.text == "‚ùì" and STATES["ans"] == 2:
        await message.reply(HELP_INFO, reply_markup=KB_PROJECT, parse_mode="Markdown")


if __name__ == '__main__':
    executor.start_polling(dp)